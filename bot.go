package telegrambot

import (
	"fmt"
	"log"
	"regexp"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const (
	SystemAdminID int64 = 6398798394
)

var (
	adminID int64
	apiToken string
	feedbackWaiting = make(map[int64]bool)
	userRoles = make(map[int64]string) // chatID -> role
	pendingRoleChoice = make(map[int64]bool)
	pendingApproveUser = make(map[int64]int64) // admin chatID -> user chatID
)

var forbiddenNames = map[string]bool{
	"üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã": true,
	"üí¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º": true,
	"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": true,
	"üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç": true,
	"üõ† –°–æ–æ–±—â–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É": true,
	"‚ùå –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è": true,
	"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ": true,
	"‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ": true,
	"‚úÖ –ü—Ä–∏–Ω—è—Ç—å": true,
	"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å": true,
	"üóë –£–¥–∞–ª–∏—Ç—å": true,
	"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": true,
	"–û–±—É–≤—â–∏–∫": true,
	"–†–µ—Å—Ç–∞–≤—Ä–∞—Ç–æ—Ä": true,
	"–•–∏–º—á–∏—Å—Ç–µ—Ä": true,
}

func getRole(chatID int64) string {
	if chatID == SystemAdminID {
		return "system_admin"
	}
	if userRoles[chatID] != "" {
		return userRoles[chatID]
	}
	if chatID == adminID {
		return "admin"
	}
	if IsKnownUser(chatID) {
		return "user"
	}
	return "guest"
}

func setRole(chatID int64, role string) {
	userRoles[chatID] = role
}

// --- –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–ú–ï–ù–ò ---
func isValidName(name string) bool {
	if forbiddenNames[name] {
		return false
	}
	// –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞/–ª–∞—Ç–∏–Ω–∏—Ü–∞
	matched, _ := regexp.MatchString(`^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9 ]{2,32}$`, name)
	return matched
}

func RunBot(token string, admin int64) {
	apiToken = token
	adminID = admin
	EnsureSystemAdminInKnownUsers() // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ
	setRole(SystemAdminID, "system_admin")
	setRole(adminID, "admin")
	bot, err := tgbotapi.NewBotAPI(apiToken)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º runtime-–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	knownUsers, _ := LoadKnownUsers()
	pendingUsers, _ := LoadPendingUsers()
	for id, u := range knownUsers {
		userRoles[id] = u.Role
	}

	pending := make(map[int64]string) // –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –∏–º–µ–Ω–∏

	for update := range updates {
		if update.Message != nil {
			chatID := update.Message.Chat.ID
			role := getRole(chatID)
			isAdmin := role == "admin" || role == "system_admin"
			isSystemAdmin := role == "system_admin"

			// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ ---
			if pendingRoleChoice[chatID] {
				if (isSystemAdmin && (update.Message.Text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" || update.Message.Text == "–û–±—É–≤—â–∏–∫" || update.Message.Text == "–†–µ—Å—Ç–∞–≤—Ä–∞—Ç–æ—Ä" || update.Message.Text == "–•–∏–º—á–∏—Å—Ç–µ—Ä")) ||
					(!isSystemAdmin && (update.Message.Text == "–û–±—É–≤—â–∏–∫" || update.Message.Text == "–†–µ—Å—Ç–∞–≤—Ä–∞—Ç–æ—Ä" || update.Message.Text == "–•–∏–º—á–∏—Å—Ç–µ—Ä")) {
					uid := pendingApproveUser[chatID]
					pendingUser, ok := pendingUsers[uid]
					if !ok {
						bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞–Ω–∏–∏."))
						continue
					}
					// –î–æ–±–∞–≤–ª—è–µ–º –≤ known_users.txt
					newUser := UserRecord{
						ID:      pendingUser.ID,
						Name:    pendingUser.Name,
						Role:    update.Message.Text,
						Username: pendingUser.Username,
						Phone:   pendingUser.Phone,
					}
					AddKnownUserFull(newUser)
					userRoles[uid] = update.Message.Text
					RemovePendingUser(uid)
					msg := tgbotapi.NewMessage(uid, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í–∞—à–∞ —Ä–æ–ª—å: "+update.Message.Text)
					if update.Message.Text != "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" {
						msg.ReplyMarkup = userMenu()
					}
					bot.Send(msg)
					// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω
					if chatID != SystemAdminID {
						adminMsg := tgbotapi.NewMessage(chatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: "+update.Message.Text)
						adminMsg.ReplyMarkup = usersMenu()
						bot.Send(adminMsg)
					} else {
						// –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
						adminMsg := tgbotapi.NewMessage(chatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: "+update.Message.Text)
						adminMsg.ReplyMarkup = usersMenu()
						bot.Send(adminMsg)
					}
					delete(pendingRoleChoice, chatID)
					delete(pendingApproveUser, chatID)
					continue
				}
				msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫!")
				msg.ReplyMarkup = roleChoiceMenu(isSystemAdmin)
				bot.Send(msg)
				continue
			}

			// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---
			if update.Message.IsCommand() && update.Message.Command() == "start" {
				if isAdmin {
					msg := tgbotapi.NewMessage(chatID, "–í—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
					msg.ReplyMarkup = adminMenu(isSystemAdmin)
					bot.Send(msg)
					continue
				}
				if IsKnownUser(chatID) {
					msg := tgbotapi.NewMessage(chatID, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
					msg.ReplyMarkup = userMenu()
					bot.Send(msg)
					continue
				}
				regKb := tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButtonContact("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"),
					),
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("üõ† –°–æ–æ–±—â–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"),
					),
				)
				msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
				msg.ReplyMarkup = regKb
				bot.Send(msg)
				continue
			}

			// --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ ---
			if !IsKnownUser(chatID) && update.Message.Text != "" && pending[chatID] == "" {
				if !isValidName(update.Message.Text) {
					msg := tgbotapi.NewMessage(chatID, "–≠—Ç–æ –∏–º—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, 2-32 —Å–∏–º–≤–æ–ª–∞).")
					bot.Send(msg)
					continue
				}
				pending[chatID] = update.Message.Text
				msg := tgbotapi.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
				msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButtonContact("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"),
					),
				)
				bot.Send(msg)
				continue
			}

			// --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ---
			if !IsKnownUser(chatID) {
				if update.Message.Contact != nil {
					name, ok := pending[chatID]
					if !ok {
						msg := tgbotapi.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
						bot.Send(msg)
						continue
					}
					username := update.Message.From.UserName
					if username == "" {
						username = "–±–µ–∑ username"
					}
					phone := update.Message.Contact.PhoneNumber
					pendingUser := UserRecord{
						ID:      chatID,
						Name:    name,
						Username: username,
						Phone:   phone,
					}
					AddPendingUser(pendingUser)
					pendingUsers[chatID] = pendingUser
					// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
					if chatID != SystemAdminID { // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ
						text := fmt.Sprintf("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", username)
						if SystemAdminID != adminID {
							bot.Send(tgbotapi.NewMessage(SystemAdminID, text))
						}
						bot.Send(tgbotapi.NewMessage(adminID, text))
					}
					msg := tgbotapi.NewMessage(chatID, "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")
					bot.Send(msg)
					continue
				}
			}

			// --- –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
			if role == "user" || role == "–û–±—É–≤—â–∏–∫" || role == "–†–µ—Å—Ç–∞–≤—Ä–∞—Ç–æ—Ä" || role == "–•–∏–º—á–∏—Å—Ç–µ—Ä" {
				if update.Message.Text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã" {
					msg := tgbotapi.NewMessage(chatID, "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (–∑–∞–≥–ª—É—à–∫–∞)")
					msg.ReplyMarkup = userMenu()
					bot.Send(msg)
					continue
				}
				if update.Message.Text == "üí¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º" {
					feedbackWaiting[chatID] = true
					cancelKb := tgbotapi.NewReplyKeyboard(
						tgbotapi.NewKeyboardButtonRow(
							tgbotapi.NewKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"),
						),
					)
					msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
					msg.ReplyMarkup = cancelKb
					bot.Send(msg)
					continue
				}
				msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
				msg.ReplyMarkup = userMenu()
				bot.Send(msg)
				continue
			}

			// --- –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---
			if feedbackWaiting[chatID] {
				if update.Message.Text == "‚ùå –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è" {
					feedbackWaiting[chatID] = false
					msg := tgbotapi.NewMessage(chatID, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
					msg.ReplyMarkup = userMenu()
					bot.Send(msg)
					continue
				}
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω—É
				text := fmt.Sprintf("üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", chatID, update.Message.Text)
				if SystemAdminID != adminID {
					bot.Send(tgbotapi.NewMessage(SystemAdminID, text))
				}
				bot.Send(tgbotapi.NewMessage(adminID, text))
				feedbackWaiting[chatID] = false
				msg := tgbotapi.NewMessage(chatID, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
				msg.ReplyMarkup = userMenu()
				bot.Send(msg)
				continue
			}

			// --- –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞ ---
			if isAdmin {
				if update.Message.Text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" {
					msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
					msg.ReplyMarkup = usersMenu()
					bot.Send(msg)
					continue
				}
				if update.Message.Text == "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ" {
					knownUsers, _ = LoadKnownUsers()
					if len(knownUsers) == 0 {
						msg := tgbotapi.NewMessage(chatID, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
						msg.ReplyMarkup = usersMenu()
						bot.Send(msg)
						continue
					}
					rows := [][]tgbotapi.KeyboardButton{}
					for _, u := range knownUsers {
						if u.ID == chatID && (u.Role == "admin" || u.Role == "system_admin") {
							continue // –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–±—è
						}
						if u.Role == "admin" && !isSystemAdmin {
							continue // –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω –Ω–µ –≤–∏–¥–∏—Ç –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
						}
						rows = append(rows, tgbotapi.NewKeyboardButtonRow(
							tgbotapi.NewKeyboardButton(fmt.Sprintf("%s (%s) üóë", u.Name, u.Role)),
						))
					}
					menu := tgbotapi.NewReplyKeyboard(rows...)
					menu.Keyboard = append(menu.Keyboard, tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
					))
					msg := tgbotapi.NewMessage(chatID, "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
					msg.ReplyMarkup = menu
					bot.Send(msg)
					continue
				}
				if update.Message.Text == "‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ" {
					pendingUsers, _ = LoadPendingUsers()
					if len(pendingUsers) == 0 {
						msg := tgbotapi.NewMessage(chatID, "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
						msg.ReplyMarkup = usersMenu()
						bot.Send(msg)
						continue
					}
					rows := [][]tgbotapi.KeyboardButton{}
					for _, u := range pendingUsers {
						rows = append(rows, tgbotapi.NewKeyboardButtonRow(
							tgbotapi.NewKeyboardButton(fmt.Sprintf("%s (%d)", u.Name, u.ID)),
						))
					}
					menu := tgbotapi.NewReplyKeyboard(rows...)
					menu.Keyboard = append(menu.Keyboard, tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
					))
					msg := tgbotapi.NewMessage(chatID, "–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
					msg.ReplyMarkup = menu
					bot.Send(msg)
					continue
				}
				if update.Message.Text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" {
					msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
					msg.ReplyMarkup = usersMenu()
					bot.Send(msg)
					continue
				}
				// --- –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ ---
				if strings.Contains(update.Message.Text, "(") && strings.Contains(update.Message.Text, ")") {
					// –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö: "–ò–º—è (—Ä–æ–ª—å) üóë"; –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö: "–ò–º—è (id)"
					if strings.Contains(update.Message.Text, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä") || strings.Contains(update.Message.Text, "system_admin") {
						msg := tgbotapi.NewMessage(chatID, "–î–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
						bot.Send(msg)
						continue
					}
					if strings.HasSuffix(update.Message.Text, "üóë") {
						// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
						parts := strings.Split(update.Message.Text, "(")
						rolePart := strings.TrimSuffix(strings.TrimSpace(parts[1]), ") üóë")
						// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ —Ä–æ–ª–∏
						var toDeleteID int64 = 0
						for id, u := range knownUsers {
							if u.Name == parts[0] && u.Role == rolePart {
								toDeleteID = id
								break
							}
						}
						if toDeleteID != 0 {
							RemoveKnownUser(toDeleteID)
							delete(userRoles, toDeleteID)
							msg := tgbotapi.NewMessage(chatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.")
							bot.Send(msg)
							knownUsers, _ = LoadKnownUsers()
						} else {
							msg := tgbotapi.NewMessage(chatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
							bot.Send(msg)
						}
						continue
					}
					// –û–∂–∏–¥–∞—é—â–∏–µ: "–ò–º—è (id)"
					if strings.Contains(update.Message.Text, "–û–∂–∏–¥–∞—é—â–∏–µ") {
						continue
					}
					parts := strings.Split(update.Message.Text, "(")
					idStr := strings.TrimSuffix(parts[1], ")")
					var uid int64
					fmt.Sscanf(idStr, "%d", &uid)
					pendingRoleChoice[chatID] = true
					pendingApproveUser[chatID] = uid
					msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
					msg.ReplyMarkup = roleChoiceMenu(isSystemAdmin)
					bot.Send(msg)
					continue
				}
			}
		}
		if update.CallbackQuery != nil {
			// ... (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
		}
	}
}

func userMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üí¨ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º"),
		),
	)
}

func adminMenu(isSystemAdmin bool) tgbotapi.ReplyKeyboardMarkup {
	menu := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
		),
	)
	return menu
}

func usersMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ"),
			tgbotapi.NewKeyboardButton("‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ"),
		),
	)
}

func roleChoiceMenu(isSystemAdmin bool) tgbotapi.ReplyKeyboardMarkup {
	row := []tgbotapi.KeyboardButton{
		tgbotapi.NewKeyboardButton("–û–±—É–≤—â–∏–∫"),
		tgbotapi.NewKeyboardButton("–†–µ—Å—Ç–∞–≤—Ä–∞—Ç–æ—Ä"),
		tgbotapi.NewKeyboardButton("–•–∏–º—á–∏—Å—Ç–µ—Ä"),
	}
	if isSystemAdmin {
		row = append(row, tgbotapi.NewKeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"))
	}
	return tgbotapi.NewReplyKeyboard(row)
} 